name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: agsi-linux-x86_64
            bin: agsipls
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: agsi-linux-aarch64
            bin: agsipls
            cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            name: agsi-darwin-x86_64
            bin: agsipls
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            name: agsi-darwin-aarch64
            bin: agsipls
            cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: agsi-windows-x86_64.exe
            bin: agsipls.exe
            cross: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install cross-compilation tools
        if: matrix.platform.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary (native)
        if: ${{ !matrix.platform.cross }}
        run: cargo build --release --target ${{ matrix.platform.target }}

      - name: Build binary (cross)
        if: matrix.platform.cross
        run: cross build --release --target ${{ matrix.platform.target }}

      - name: Strip binary (Linux and macOS)
        if: matrix.platform.os != 'windows-latest'
        run: strip target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}

      - name: Prepare binary for upload
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          mkdir -p ../../../dist/${{ matrix.platform.name }}
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            cp ${{ matrix.platform.bin }} ../../../dist/${{ matrix.platform.name }}/
          else
            cp ${{ matrix.platform.bin }} ../../../dist/${{ matrix.platform.name }}/
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.platform.name }}
          path: dist/${{ matrix.platform.name }}/${{ matrix.platform.bin }}
          if-no-files-found: error

  release:
    name: Create Release with GoReleaser
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: binary-*
          merge-multiple: false

      - name: Organize binaries for GoReleaser
        run: |
          # GoReleaser expects binaries in dist/{goos}_{goarch}/
          mkdir -p dist/linux_amd64 dist/linux_arm64 dist/darwin_amd64 dist/darwin_arm64 dist/windows_amd64
          
          # Move binaries to expected locations
          if [ -f dist/binary-agsi-linux-x86_64/agsi ]; then
            mv dist/binary-agsi-linux-x86_64/agsi dist/linux_amd64/agsi
          fi
          
          if [ -f dist/binary-agsi-linux-aarch64/agsi ]; then
            mv dist/binary-agsi-linux-aarch64/agsi dist/linux_arm64/agsi
          fi
          
          if [ -f dist/binary-agsi-darwin-x86_64/agsi ]; then
            mv dist/binary-agsi-darwin-x86_64/agsi dist/darwin_amd64/agsi
          fi
          
          if [ -f dist/binary-agsi-darwin-aarch64/agsi ]; then
            mv dist/binary-agsi-darwin-aarch64/agsi dist/darwin_arm64/agsi
          fi
          
          if [ -f dist/binary-agsi-windows-x86_64.exe/agsi.exe ]; then
            mv dist/binary-agsi-windows-x86_64.exe/agsi.exe dist/windows_amd64/agsi.exe
          fi
          
          # Clean up artifact directories
          rm -rf dist/binary-*
          
          # List final structure
          find dist -type f

      - name: Set up Go (for GoReleaser)
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
